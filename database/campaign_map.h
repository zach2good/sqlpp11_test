// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_CAMPAIGN_MAP_H
#define XIDB_CAMPAIGN_MAP_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CampaignMap_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Zoneid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneid;
            T& operator()() { return zoneid; }
            const T& operator()() const { return zoneid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Isbattle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "isbattle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isbattle;
            T& operator()() { return isbattle; }
            const T& operator()() const { return isbattle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Nation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nation;
            T& operator()() { return nation; }
            const T& operator()() const { return nation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Heroism
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "heroism";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T heroism;
            T& operator()() { return heroism; }
            const T& operator()() const { return heroism; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InfluenceSandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influenceSandoria;
            T& operator()() { return influenceSandoria; }
            const T& operator()() const { return influenceSandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InfluenceBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influenceBastok;
            T& operator()() { return influenceBastok; }
            const T& operator()() const { return influenceBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InfluenceWindurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influenceWindurst;
            T& operator()() { return influenceWindurst; }
            const T& operator()() const { return influenceWindurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InfluenceBeastman
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "influence_beastman";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T influenceBeastman;
            T& operator()() { return influenceBeastman; }
            const T& operator()() const { return influenceBeastman; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct CurrentFortifications
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_fortifications";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentFortifications;
            T& operator()() { return currentFortifications; }
            const T& operator()() const { return currentFortifications; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct CurrentResources
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_resources";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentResources;
            T& operator()() { return currentResources; }
            const T& operator()() const { return currentResources; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MaxFortifications
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_fortifications";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxFortifications;
            T& operator()() { return maxFortifications; }
            const T& operator()() const { return maxFortifications; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MaxResources
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_resources";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxResources;
            T& operator()() { return maxResources; }
            const T& operator()() const { return maxResources; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace CampaignMap_

  struct CampaignMap: sqlpp::table_t<CampaignMap,
               CampaignMap_::Id,
               CampaignMap_::Zoneid,
               CampaignMap_::Isbattle,
               CampaignMap_::Nation,
               CampaignMap_::Heroism,
               CampaignMap_::InfluenceSandoria,
               CampaignMap_::InfluenceBastok,
               CampaignMap_::InfluenceWindurst,
               CampaignMap_::InfluenceBeastman,
               CampaignMap_::CurrentFortifications,
               CampaignMap_::CurrentResources,
               CampaignMap_::MaxFortifications,
               CampaignMap_::MaxResources>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "campaign_map";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T campaignMap;
        T& operator()() { return campaignMap; }
        const T& operator()() const { return campaignMap; }
      };
    };
  };
} // namespace xidb
#endif
