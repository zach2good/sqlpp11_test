// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_UNLOCKS_H
#define XIDB_CHAR_UNLOCKS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharUnlocks_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct OutpostSandy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_sandy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpostSandy;
            T& operator()() { return outpostSandy; }
            const T& operator()() const { return outpostSandy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct OutpostBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpostBastok;
            T& operator()() { return outpostBastok; }
            const T& operator()() const { return outpostBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct OutpostWindy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "outpost_windy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T outpostWindy;
            T& operator()() { return outpostWindy; }
            const T& operator()() const { return outpostWindy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MogLocker
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mog_locker";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mogLocker;
            T& operator()() { return mogLocker; }
            const T& operator()() const { return mogLocker; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RunicPortal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "runic_portal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T runicPortal;
            T& operator()() { return runicPortal; }
            const T& operator()() const { return runicPortal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Maw
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maw";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maw;
            T& operator()() { return maw; }
            const T& operator()() const { return maw; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CampaignSandy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_sandy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaignSandy;
            T& operator()() { return campaignSandy; }
            const T& operator()() const { return campaignSandy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CampaignBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaignBastok;
            T& operator()() { return campaignBastok; }
            const T& operator()() const { return campaignBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CampaignWindy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "campaign_windy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T campaignWindy;
            T& operator()() { return campaignWindy; }
            const T& operator()() const { return campaignWindy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Homepoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "homepoints";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T homepoints;
            T& operator()() { return homepoints; }
            const T& operator()() const { return homepoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct Survivals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "survivals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T survivals;
            T& operator()() { return survivals; }
            const T& operator()() const { return survivals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
  } // namespace CharUnlocks_

  struct CharUnlocks: sqlpp::table_t<CharUnlocks,
               CharUnlocks_::Charid,
               CharUnlocks_::OutpostSandy,
               CharUnlocks_::OutpostBastok,
               CharUnlocks_::OutpostWindy,
               CharUnlocks_::MogLocker,
               CharUnlocks_::RunicPortal,
               CharUnlocks_::Maw,
               CharUnlocks_::CampaignSandy,
               CharUnlocks_::CampaignBastok,
               CharUnlocks_::CampaignWindy,
               CharUnlocks_::Homepoints,
               CharUnlocks_::Survivals>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_unlocks";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charUnlocks;
        T& operator()() { return charUnlocks; }
        const T& operator()() const { return charUnlocks; }
      };
    };
  };
} // namespace xidb
#endif
