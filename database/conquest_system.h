// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CONQUEST_SYSTEM_H
#define XIDB_CONQUEST_SYSTEM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace ConquestSystem_
  {
    struct RegionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T regionId;
            T& operator()() { return regionId; }
            const T& operator()() const { return regionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RegionControl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_control";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T regionControl;
            T& operator()() { return regionControl; }
            const T& operator()() const { return regionControl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RegionControlPrev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "region_control_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T regionControlPrev;
            T& operator()() { return regionControlPrev; }
            const T& operator()() const { return regionControlPrev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SandoriaInfluence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sandoria_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sandoriaInfluence;
            T& operator()() { return sandoriaInfluence; }
            const T& operator()() const { return sandoriaInfluence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BastokInfluence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bastok_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bastokInfluence;
            T& operator()() { return bastokInfluence; }
            const T& operator()() const { return bastokInfluence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WindurstInfluence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "windurst_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windurstInfluence;
            T& operator()() { return windurstInfluence; }
            const T& operator()() const { return windurstInfluence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BeastmenInfluence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beastmen_influence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beastmenInfluence;
            T& operator()() { return beastmenInfluence; }
            const T& operator()() const { return beastmenInfluence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace ConquestSystem_

  struct ConquestSystem: sqlpp::table_t<ConquestSystem,
               ConquestSystem_::RegionId,
               ConquestSystem_::RegionControl,
               ConquestSystem_::RegionControlPrev,
               ConquestSystem_::SandoriaInfluence,
               ConquestSystem_::BastokInfluence,
               ConquestSystem_::WindurstInfluence,
               ConquestSystem_::BeastmenInfluence>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "conquest_system";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T conquestSystem;
        T& operator()() { return conquestSystem; }
        const T& operator()() const { return conquestSystem; }
      };
    };
  };
} // namespace xidb
#endif
