// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_ABILITIES_CHARGES_H
#define XIDB_ABILITIES_CHARGES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace AbilitiesCharges_
  {
    struct RecastId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recastId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recastId;
            T& operator()() { return recastId; }
            const T& operator()() const { return recastId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Job
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T job;
            T& operator()() { return job; }
            const T& operator()() const { return job; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct MaxCharges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxCharges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxCharges;
            T& operator()() { return maxCharges; }
            const T& operator()() const { return maxCharges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ChargeTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chargeTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chargeTime;
            T& operator()() { return chargeTime; }
            const T& operator()() const { return chargeTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MeritModID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meritModID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T meritModID;
            T& operator()() { return meritModID; }
            const T& operator()() const { return meritModID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace AbilitiesCharges_

  struct AbilitiesCharges: sqlpp::table_t<AbilitiesCharges,
               AbilitiesCharges_::RecastId,
               AbilitiesCharges_::Job,
               AbilitiesCharges_::Level,
               AbilitiesCharges_::MaxCharges,
               AbilitiesCharges_::ChargeTime,
               AbilitiesCharges_::MeritModID>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "abilities_charges";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T abilitiesCharges;
        T& operator()() { return abilitiesCharges; }
        const T& operator()() const { return abilitiesCharges; }
      };
    };
  };
} // namespace xidb
#endif
