// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_FISHING_ZONE_H
#define XIDB_FISHING_ZONE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace FishingZone_
  {
    struct Zoneid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneid;
            T& operator()() { return zoneid; }
            const T& operator()() const { return zoneid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Fishid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fishid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fishid;
            T& operator()() { return fishid; }
            const T& operator()() const { return fishid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
  } // namespace FishingZone_

  struct FishingZone: sqlpp::table_t<FishingZone,
               FishingZone_::Zoneid,
               FishingZone_::Name,
               FishingZone_::Fishid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "fishing_zone";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T fishingZone;
        T& operator()() { return fishingZone; }
        const T& operator()() const { return fishingZone; }
      };
    };
  };
} // namespace xidb
#endif
