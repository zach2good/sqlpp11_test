// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_PROFILE_H
#define XIDB_CHAR_PROFILE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharProfile_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct RankPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rankPoints;
            T& operator()() { return rankPoints; }
            const T& operator()() const { return rankPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RankSandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rankSandoria;
            T& operator()() { return rankSandoria; }
            const T& operator()() const { return rankSandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RankBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rankBastok;
            T& operator()() { return rankBastok; }
            const T& operator()() const { return rankBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RankWindurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rankWindurst;
            T& operator()() { return rankWindurst; }
            const T& operator()() const { return rankWindurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FameSandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameSandoria;
            T& operator()() { return fameSandoria; }
            const T& operator()() const { return fameSandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameBastok;
            T& operator()() { return fameBastok; }
            const T& operator()() const { return fameBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameWindurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameWindurst;
            T& operator()() { return fameWindurst; }
            const T& operator()() const { return fameWindurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameNorg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_norg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameNorg;
            T& operator()() { return fameNorg; }
            const T& operator()() const { return fameNorg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameJeuno
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_jeuno";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameJeuno;
            T& operator()() { return fameJeuno; }
            const T& operator()() const { return fameJeuno; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyKonschtat
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_konschtat";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyKonschtat;
            T& operator()() { return fameAbyKonschtat; }
            const T& operator()() const { return fameAbyKonschtat; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyTahrongi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_tahrongi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyTahrongi;
            T& operator()() { return fameAbyTahrongi; }
            const T& operator()() const { return fameAbyTahrongi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyLatheine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_latheine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyLatheine;
            T& operator()() { return fameAbyLatheine; }
            const T& operator()() const { return fameAbyLatheine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyMisareaux
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_misareaux";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyMisareaux;
            T& operator()() { return fameAbyMisareaux; }
            const T& operator()() const { return fameAbyMisareaux; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyVunkerl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_vunkerl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyVunkerl;
            T& operator()() { return fameAbyVunkerl; }
            const T& operator()() const { return fameAbyVunkerl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyAttohwa
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_attohwa";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyAttohwa;
            T& operator()() { return fameAbyAttohwa; }
            const T& operator()() const { return fameAbyAttohwa; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyAltepa
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_altepa";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyAltepa;
            T& operator()() { return fameAbyAltepa; }
            const T& operator()() const { return fameAbyAltepa; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyGrauberg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_grauberg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyGrauberg;
            T& operator()() { return fameAbyGrauberg; }
            const T& operator()() const { return fameAbyGrauberg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAbyUleguerand
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_aby_uleguerand";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAbyUleguerand;
            T& operator()() { return fameAbyUleguerand; }
            const T& operator()() const { return fameAbyUleguerand; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct FameAdoulin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fame_adoulin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fameAdoulin;
            T& operator()() { return fameAdoulin; }
            const T& operator()() const { return fameAdoulin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct UnityLeader
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unity_leader";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unityLeader;
            T& operator()() { return unityLeader; }
            const T& operator()() const { return unityLeader; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace CharProfile_

  struct CharProfile: sqlpp::table_t<CharProfile,
               CharProfile_::Charid,
               CharProfile_::RankPoints,
               CharProfile_::RankSandoria,
               CharProfile_::RankBastok,
               CharProfile_::RankWindurst,
               CharProfile_::FameSandoria,
               CharProfile_::FameBastok,
               CharProfile_::FameWindurst,
               CharProfile_::FameNorg,
               CharProfile_::FameJeuno,
               CharProfile_::FameAbyKonschtat,
               CharProfile_::FameAbyTahrongi,
               CharProfile_::FameAbyLatheine,
               CharProfile_::FameAbyMisareaux,
               CharProfile_::FameAbyVunkerl,
               CharProfile_::FameAbyAttohwa,
               CharProfile_::FameAbyAltepa,
               CharProfile_::FameAbyGrauberg,
               CharProfile_::FameAbyUleguerand,
               CharProfile_::FameAdoulin,
               CharProfile_::UnityLeader>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_profile";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charProfile;
        T& operator()() { return charProfile; }
        const T& operator()() const { return charProfile; }
      };
    };
  };
} // namespace xidb
#endif
