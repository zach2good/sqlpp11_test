// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_SPELL_LIST_H
#define XIDB_SPELL_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace SpellList_
  {
    struct Spellid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellid;
            T& operator()() { return spellid; }
            const T& operator()() const { return spellid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Jobs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jobs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobs;
            T& operator()() { return jobs; }
            const T& operator()() const { return jobs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct Group
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "!group";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T group;
            T& operator()() { return group; }
            const T& operator()() const { return group; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Family
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "family";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T family;
            T& operator()() { return family; }
            const T& operator()() const { return family; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element;
            T& operator()() { return element; }
            const T& operator()() const { return element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Zonemisc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zonemisc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zonemisc;
            T& operator()() { return zonemisc; }
            const T& operator()() const { return zonemisc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ValidTargets
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "validTargets";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T validTargets;
            T& operator()() { return validTargets; }
            const T& operator()() const { return validTargets; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill;
            T& operator()() { return skill; }
            const T& operator()() const { return skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MpCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mpCost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mpCost;
            T& operator()() { return mpCost; }
            const T& operator()() const { return mpCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct CastTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "castTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T castTime;
            T& operator()() { return castTime; }
            const T& operator()() const { return castTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct RecastTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recastTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recastTime;
            T& operator()() { return recastTime; }
            const T& operator()() const { return recastTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T message;
            T& operator()() { return message; }
            const T& operator()() const { return message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MagicBurstMessage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "magicBurstMessage";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T magicBurstMessage;
            T& operator()() { return magicBurstMessage; }
            const T& operator()() const { return magicBurstMessage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AnimationTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationTime;
            T& operator()() { return animationTime; }
            const T& operator()() const { return animationTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AOE
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "AOE";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AOE;
            T& operator()() { return AOE; }
            const T& operator()() const { return AOE; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Base
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "base";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T base;
            T& operator()() { return base; }
            const T& operator()() const { return base; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Multiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "multiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T multiplier;
            T& operator()() { return multiplier; }
            const T& operator()() const { return multiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct CE
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CE";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CE;
            T& operator()() { return CE; }
            const T& operator()() const { return CE; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VE
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "VE";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VE;
            T& operator()() { return VE; }
            const T& operator()() const { return VE; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Requirements
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "requirements";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T requirements;
            T& operator()() { return requirements; }
            const T& operator()() const { return requirements; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SpellRange
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell_range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellRange;
            T& operator()() { return spellRange; }
            const T& operator()() const { return spellRange; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ContentTag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content_tag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentTag;
            T& operator()() { return contentTag; }
            const T& operator()() const { return contentTag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace SpellList_

  struct SpellList: sqlpp::table_t<SpellList,
               SpellList_::Spellid,
               SpellList_::Name,
               SpellList_::Jobs,
               SpellList_::Group,
               SpellList_::Family,
               SpellList_::Element,
               SpellList_::Zonemisc,
               SpellList_::ValidTargets,
               SpellList_::Skill,
               SpellList_::MpCost,
               SpellList_::CastTime,
               SpellList_::RecastTime,
               SpellList_::Message,
               SpellList_::MagicBurstMessage,
               SpellList_::Animation,
               SpellList_::AnimationTime,
               SpellList_::AOE,
               SpellList_::Base,
               SpellList_::Multiplier,
               SpellList_::CE,
               SpellList_::VE,
               SpellList_::Requirements,
               SpellList_::SpellRange,
               SpellList_::ContentTag>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellList;
        T& operator()() { return spellList; }
        const T& operator()() const { return spellList; }
      };
    };
  };
} // namespace xidb
#endif
