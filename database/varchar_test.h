// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_VARCHAR_TEST_H
#define XIDB_VARCHAR_TEST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace VarcharTest_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Accid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accid;
            T& operator()() { return accid; }
            const T& operator()() const { return accid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Charname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charname;
            T& operator()() { return charname; }
            const T& operator()() const { return charname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct FULLTEXT
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "FULLTEXT";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FULLTEXT;
            T& operator()() { return FULLTEXT; }
            const T& operator()() const { return FULLTEXT; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null, sqlpp::tag::can_be_null>;
    };
  } // namespace VarcharTest_

  struct VarcharTest: sqlpp::table_t<VarcharTest,
               VarcharTest_::Charid,
               VarcharTest_::Accid,
               VarcharTest_::Charname,
               VarcharTest_::FULLTEXT>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "varchar_test";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T varcharTest;
        T& operator()() { return varcharTest; }
        const T& operator()() const { return varcharTest; }
      };
    };
  };
} // namespace xidb
#endif
