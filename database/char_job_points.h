// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_JOB_POINTS_H
#define XIDB_CHAR_JOB_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharJobPoints_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Jobid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jobid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobid;
            T& operator()() { return jobid; }
            const T& operator()() const { return jobid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct CapacityPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "capacity_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T capacityPoints;
            T& operator()() { return capacityPoints; }
            const T& operator()() const { return capacityPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct JobPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobPoints;
            T& operator()() { return jobPoints; }
            const T& operator()() const { return jobPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct JobPointsSpent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job_points_spent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobPointsSpent;
            T& operator()() { return jobPointsSpent; }
            const T& operator()() const { return jobPointsSpent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Jptype0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype0;
            T& operator()() { return jptype0; }
            const T& operator()() const { return jptype0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype1;
            T& operator()() { return jptype1; }
            const T& operator()() const { return jptype1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype2;
            T& operator()() { return jptype2; }
            const T& operator()() const { return jptype2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype3;
            T& operator()() { return jptype3; }
            const T& operator()() const { return jptype3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype4;
            T& operator()() { return jptype4; }
            const T& operator()() const { return jptype4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype5;
            T& operator()() { return jptype5; }
            const T& operator()() const { return jptype5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype6;
            T& operator()() { return jptype6; }
            const T& operator()() const { return jptype6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype7;
            T& operator()() { return jptype7; }
            const T& operator()() const { return jptype7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype8;
            T& operator()() { return jptype8; }
            const T& operator()() const { return jptype8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Jptype9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jptype9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jptype9;
            T& operator()() { return jptype9; }
            const T& operator()() const { return jptype9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace CharJobPoints_

  struct CharJobPoints: sqlpp::table_t<CharJobPoints,
               CharJobPoints_::Charid,
               CharJobPoints_::Jobid,
               CharJobPoints_::CapacityPoints,
               CharJobPoints_::JobPoints,
               CharJobPoints_::JobPointsSpent,
               CharJobPoints_::Jptype0,
               CharJobPoints_::Jptype1,
               CharJobPoints_::Jptype2,
               CharJobPoints_::Jptype3,
               CharJobPoints_::Jptype4,
               CharJobPoints_::Jptype5,
               CharJobPoints_::Jptype6,
               CharJobPoints_::Jptype7,
               CharJobPoints_::Jptype8,
               CharJobPoints_::Jptype9>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_job_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charJobPoints;
        T& operator()() { return charJobPoints; }
        const T& operator()() const { return charJobPoints; }
      };
    };
  };
} // namespace xidb
#endif
