// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_ITEM_USABLE_H
#define XIDB_ITEM_USABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace ItemUsable_
  {
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ValidTargets
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "validTargets";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T validTargets;
            T& operator()() { return validTargets; }
            const T& operator()() const { return validTargets; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Activation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "activation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T activation;
            T& operator()() { return activation; }
            const T& operator()() const { return activation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AnimationTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationTime;
            T& operator()() { return animationTime; }
            const T& operator()() const { return animationTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCharges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxCharges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxCharges;
            T& operator()() { return maxCharges; }
            const T& operator()() const { return maxCharges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct UseDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "useDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useDelay;
            T& operator()() { return useDelay; }
            const T& operator()() const { return useDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ReuseDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reuseDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reuseDelay;
            T& operator()() { return reuseDelay; }
            const T& operator()() const { return reuseDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Aoe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aoe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aoe;
            T& operator()() { return aoe; }
            const T& operator()() const { return aoe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace ItemUsable_

  struct ItemUsable: sqlpp::table_t<ItemUsable,
               ItemUsable_::Itemid,
               ItemUsable_::Name,
               ItemUsable_::ValidTargets,
               ItemUsable_::Activation,
               ItemUsable_::Animation,
               ItemUsable_::AnimationTime,
               ItemUsable_::MaxCharges,
               ItemUsable_::UseDelay,
               ItemUsable_::ReuseDelay,
               ItemUsable_::Aoe>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_usable";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemUsable;
        T& operator()() { return itemUsable; }
        const T& operator()() const { return itemUsable; }
      };
    };
  };
} // namespace xidb
#endif
