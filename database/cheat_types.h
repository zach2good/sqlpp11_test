// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_CHEAT_TYPES_H
#define XIDB_CHEAT_TYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CheatTypes_
  {
    struct Cheatid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cheatid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cheatid;
            T& operator()() { return cheatid; }
            const T& operator()() const { return cheatid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Argument
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "argument";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T argument;
            T& operator()() { return argument; }
            const T& operator()() const { return argument; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ActionBitmask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "action_bitmask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionBitmask;
            T& operator()() { return actionBitmask; }
            const T& operator()() const { return actionBitmask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct WarningMessage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "warning_message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T warningMessage;
            T& operator()() { return warningMessage; }
            const T& operator()() const { return warningMessage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace CheatTypes_

  struct CheatTypes: sqlpp::table_t<CheatTypes,
               CheatTypes_::Cheatid,
               CheatTypes_::Name,
               CheatTypes_::Description,
               CheatTypes_::Argument,
               CheatTypes_::ActionBitmask,
               CheatTypes_::WarningMessage>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "cheat_types";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T cheatTypes;
        T& operator()() { return cheatTypes; }
        const T& operator()() const { return cheatTypes; }
      };
    };
  };
} // namespace xidb
#endif
