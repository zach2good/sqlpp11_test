// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_POINTS_H
#define XIDB_CHAR_POINTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharPoints_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct SandoriaCp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sandoria_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sandoriaCp;
            T& operator()() { return sandoriaCp; }
            const T& operator()() const { return sandoriaCp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BastokCp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bastok_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bastokCp;
            T& operator()() { return bastokCp; }
            const T& operator()() const { return bastokCp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct WindurstCp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "windurst_cp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windurstCp;
            T& operator()() { return windurstCp; }
            const T& operator()() const { return windurstCp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BeastmanSeal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "beastman_seal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T beastmanSeal;
            T& operator()() { return beastmanSeal; }
            const T& operator()() const { return beastmanSeal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct KindredSeal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kindred_seal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kindredSeal;
            T& operator()() { return kindredSeal; }
            const T& operator()() const { return kindredSeal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct KindredCrest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kindredCrest;
            T& operator()() { return kindredCrest; }
            const T& operator()() const { return kindredCrest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct HighKindredCrest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "high_kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T highKindredCrest;
            T& operator()() { return highKindredCrest; }
            const T& operator()() const { return highKindredCrest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SacredKindredCrest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sacred_kindred_crest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sacredKindredCrest;
            T& operator()() { return sacredKindredCrest; }
            const T& operator()() const { return sacredKindredCrest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AncientBeastcoin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ancient_beastcoin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ancientBeastcoin;
            T& operator()() { return ancientBeastcoin; }
            const T& operator()() const { return ancientBeastcoin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ValorPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "valor_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T valorPoint;
            T& operator()() { return valorPoint; }
            const T& operator()() const { return valorPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Scyld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scyld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scyld;
            T& operator()() { return scyld; }
            const T& operator()() const { return scyld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GuildFishing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_fishing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildFishing;
            T& operator()() { return guildFishing; }
            const T& operator()() const { return guildFishing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildWoodworking
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_woodworking";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildWoodworking;
            T& operator()() { return guildWoodworking; }
            const T& operator()() const { return guildWoodworking; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildSmithing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_smithing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildSmithing;
            T& operator()() { return guildSmithing; }
            const T& operator()() const { return guildSmithing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildGoldsmithing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_goldsmithing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildGoldsmithing;
            T& operator()() { return guildGoldsmithing; }
            const T& operator()() const { return guildGoldsmithing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildWeaving
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_weaving";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildWeaving;
            T& operator()() { return guildWeaving; }
            const T& operator()() const { return guildWeaving; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildLeathercraft
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_leathercraft";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildLeathercraft;
            T& operator()() { return guildLeathercraft; }
            const T& operator()() const { return guildLeathercraft; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildBonecraft
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_bonecraft";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildBonecraft;
            T& operator()() { return guildBonecraft; }
            const T& operator()() const { return guildBonecraft; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildAlchemy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_alchemy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildAlchemy;
            T& operator()() { return guildAlchemy; }
            const T& operator()() const { return guildAlchemy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GuildCooking
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guild_cooking";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildCooking;
            T& operator()() { return guildCooking; }
            const T& operator()() const { return guildCooking; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Cinder
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cinder";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cinder;
            T& operator()() { return cinder; }
            const T& operator()() const { return cinder; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FireFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fireFewell;
            T& operator()() { return fireFewell; }
            const T& operator()() const { return fireFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct IceFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iceFewell;
            T& operator()() { return iceFewell; }
            const T& operator()() const { return iceFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WindFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windFewell;
            T& operator()() { return windFewell; }
            const T& operator()() const { return windFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EarthFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earthFewell;
            T& operator()() { return earthFewell; }
            const T& operator()() const { return earthFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LightningFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightningFewell;
            T& operator()() { return lightningFewell; }
            const T& operator()() const { return lightningFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WaterFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T waterFewell;
            T& operator()() { return waterFewell; }
            const T& operator()() const { return waterFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LightFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightFewell;
            T& operator()() { return lightFewell; }
            const T& operator()() const { return lightFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DarkFewell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_fewell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T darkFewell;
            T& operator()() { return darkFewell; }
            const T& operator()() const { return darkFewell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct BallistaPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ballista_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ballistaPoint;
            T& operator()() { return ballistaPoint; }
            const T& operator()() const { return ballistaPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FellowPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fellow_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fellowPoint;
            T& operator()() { return fellowPoint; }
            const T& operator()() const { return fellowPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DailyTally
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "daily_tally";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dailyTally;
            T& operator()() { return dailyTally; }
            const T& operator()() const { return dailyTally; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ChocobuckSandoria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_sandoria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuckSandoria;
            T& operator()() { return chocobuckSandoria; }
            const T& operator()() const { return chocobuckSandoria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ChocobuckBastok
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_bastok";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuckBastok;
            T& operator()() { return chocobuckBastok; }
            const T& operator()() const { return chocobuckBastok; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ChocobuckWindurst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chocobuck_windurst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chocobuckWindurst;
            T& operator()() { return chocobuckWindurst; }
            const T& operator()() const { return chocobuckWindurst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ResearchMark
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "research_mark";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T researchMark;
            T& operator()() { return researchMark; }
            const T& operator()() const { return researchMark; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TunnelWorm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tunnel_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tunnelWorm;
            T& operator()() { return tunnelWorm; }
            const T& operator()() const { return tunnelWorm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MorionWorm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "morion_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T morionWorm;
            T& operator()() { return morionWorm; }
            const T& operator()() const { return morionWorm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PhantomWorm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phantom_worm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phantomWorm;
            T& operator()() { return phantomWorm; }
            const T& operator()() const { return phantomWorm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MoblinMarble
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "moblin_marble";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moblinMarble;
            T& operator()() { return moblinMarble; }
            const T& operator()() const { return moblinMarble; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Infamy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "infamy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T infamy;
            T& operator()() { return infamy; }
            const T& operator()() const { return infamy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Prestige
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prestige";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prestige;
            T& operator()() { return prestige; }
            const T& operator()() const { return prestige; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct LegionPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "legion_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T legionPoint;
            T& operator()() { return legionPoint; }
            const T& operator()() const { return legionPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SparkOfEminence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spark_of_eminence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sparkOfEminence;
            T& operator()() { return sparkOfEminence; }
            const T& operator()() const { return sparkOfEminence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ShiningStar
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shining_star";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shiningStar;
            T& operator()() { return shiningStar; }
            const T& operator()() const { return shiningStar; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ImperialStanding
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "imperial_standing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T imperialStanding;
            T& operator()() { return imperialStanding; }
            const T& operator()() const { return imperialStanding; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LeujaoamAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leujaoam_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leujaoamAssaultPoint;
            T& operator()() { return leujaoamAssaultPoint; }
            const T& operator()() const { return leujaoamAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MamoolAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mamool_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mamoolAssaultPoint;
            T& operator()() { return mamoolAssaultPoint; }
            const T& operator()() const { return mamoolAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LebrosAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lebros_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lebrosAssaultPoint;
            T& operator()() { return lebrosAssaultPoint; }
            const T& operator()() const { return lebrosAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PeriqiaAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "periqia_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T periqiaAssaultPoint;
            T& operator()() { return periqiaAssaultPoint; }
            const T& operator()() const { return periqiaAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct IlrusiAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilrusi_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilrusiAssaultPoint;
            T& operator()() { return ilrusiAssaultPoint; }
            const T& operator()() const { return ilrusiAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct NyzulIsleAssaultPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nyzul_isle_assault_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nyzulIsleAssaultPoint;
            T& operator()() { return nyzulIsleAssaultPoint; }
            const T& operator()() const { return nyzulIsleAssaultPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ZeniPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zeni_point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zeniPoint;
            T& operator()() { return zeniPoint; }
            const T& operator()() const { return zeniPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Jetton
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jetton";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jetton;
            T& operator()() { return jetton; }
            const T& operator()() const { return jetton; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TherionIchor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "therion_ichor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T therionIchor;
            T& operator()() { return therionIchor; }
            const T& operator()() const { return therionIchor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AlliedNotes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "allied_notes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T alliedNotes;
            T& operator()() { return alliedNotes; }
            const T& operator()() const { return alliedNotes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AmanVouchers
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aman_vouchers";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amanVouchers;
            T& operator()() { return amanVouchers; }
            const T& operator()() const { return amanVouchers; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct LoginPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "login_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T loginPoints;
            T& operator()() { return loginPoints; }
            const T& operator()() const { return loginPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Bayld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bayld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bayld;
            T& operator()() { return bayld; }
            const T& operator()() const { return bayld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct KineticUnit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kinetic_unit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kineticUnit;
            T& operator()() { return kineticUnit; }
            const T& operator()() const { return kineticUnit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ObsidianFragment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "obsidian_fragment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T obsidianFragment;
            T& operator()() { return obsidianFragment; }
            const T& operator()() const { return obsidianFragment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LebondoptWing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lebondopt_wing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lebondoptWing;
            T& operator()() { return lebondoptWing; }
            const T& operator()() const { return lebondoptWing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct PulchridoptWing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pulchridopt_wing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pulchridoptWing;
            T& operator()() { return pulchridoptWing; }
            const T& operator()() const { return pulchridoptWing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MweyaPlasm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mweya_plasm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mweyaPlasm;
            T& operator()() { return mweyaPlasm; }
            const T& operator()() const { return mweyaPlasm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Cruor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cruor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cruor;
            T& operator()() { return cruor; }
            const T& operator()() const { return cruor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ResistanceCredit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resistance_credit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistanceCredit;
            T& operator()() { return resistanceCredit; }
            const T& operator()() const { return resistanceCredit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DominionNote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dominion_note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dominionNote;
            T& operator()() { return dominionNote; }
            const T& operator()() const { return dominionNote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FifthEchelonTrophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fifth_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fifthEchelonTrophy;
            T& operator()() { return fifthEchelonTrophy; }
            const T& operator()() const { return fifthEchelonTrophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FourthEchelonTrophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fourth_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fourthEchelonTrophy;
            T& operator()() { return fourthEchelonTrophy; }
            const T& operator()() const { return fourthEchelonTrophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ThirdEchelonTrophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "third_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T thirdEchelonTrophy;
            T& operator()() { return thirdEchelonTrophy; }
            const T& operator()() const { return thirdEchelonTrophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SecondEchelonTrophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "second_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondEchelonTrophy;
            T& operator()() { return secondEchelonTrophy; }
            const T& operator()() const { return secondEchelonTrophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FirstEchelonTrophy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "first_echelon_trophy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T firstEchelonTrophy;
            T& operator()() { return firstEchelonTrophy; }
            const T& operator()() const { return firstEchelonTrophy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct CavePoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cave_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cavePoints;
            T& operator()() { return cavePoints; }
            const T& operator()() const { return cavePoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct IdTags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id_tags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idTags;
            T& operator()() { return idTags; }
            const T& operator()() const { return idTags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct OpCredits
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "op_credits";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T opCredits;
            T& operator()() { return opCredits; }
            const T& operator()() const { return opCredits; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TraverserStones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "traverser_stones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T traverserStones;
            T& operator()() { return traverserStones; }
            const T& operator()() const { return traverserStones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Voidstones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "voidstones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T voidstones;
            T& operator()() { return voidstones; }
            const T& operator()() const { return voidstones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct KupofriedCorundums
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kupofried_corundums";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kupofriedCorundums;
            T& operator()() { return kupofriedCorundums; }
            const T& operator()() const { return kupofriedCorundums; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Imprimaturs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "imprimaturs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T imprimaturs;
            T& operator()() { return imprimaturs; }
            const T& operator()() const { return imprimaturs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PheromoneSacks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pheromone_sacks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pheromoneSacks;
            T& operator()() { return pheromoneSacks; }
            const T& operator()() const { return pheromoneSacks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh1;
            T& operator()() { return remsCh1; }
            const T& operator()() const { return remsCh1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh2;
            T& operator()() { return remsCh2; }
            const T& operator()() const { return remsCh2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh3;
            T& operator()() { return remsCh3; }
            const T& operator()() const { return remsCh3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh4;
            T& operator()() { return remsCh4; }
            const T& operator()() const { return remsCh4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh5;
            T& operator()() { return remsCh5; }
            const T& operator()() const { return remsCh5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh6;
            T& operator()() { return remsCh6; }
            const T& operator()() const { return remsCh6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh7;
            T& operator()() { return remsCh7; }
            const T& operator()() const { return remsCh7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh8;
            T& operator()() { return remsCh8; }
            const T& operator()() const { return remsCh8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh9;
            T& operator()() { return remsCh9; }
            const T& operator()() const { return remsCh9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RemsCh10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rems_ch10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remsCh10;
            T& operator()() { return remsCh10; }
            const T& operator()() const { return remsCh10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ReclamationMarks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reclamation_marks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reclamationMarks;
            T& operator()() { return reclamationMarks; }
            const T& operator()() const { return reclamationMarks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct UnityAccolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unity_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unityAccolades;
            T& operator()() { return unityAccolades; }
            const T& operator()() const { return unityAccolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FireCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fireCrystals;
            T& operator()() { return fireCrystals; }
            const T& operator()() const { return fireCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct IceCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iceCrystals;
            T& operator()() { return iceCrystals; }
            const T& operator()() const { return iceCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct WindCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windCrystals;
            T& operator()() { return windCrystals; }
            const T& operator()() const { return windCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EarthCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earthCrystals;
            T& operator()() { return earthCrystals; }
            const T& operator()() const { return earthCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct LightningCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightningCrystals;
            T& operator()() { return lightningCrystals; }
            const T& operator()() const { return lightningCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct WaterCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T waterCrystals;
            T& operator()() { return waterCrystals; }
            const T& operator()() const { return waterCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct LightCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightCrystals;
            T& operator()() { return lightCrystals; }
            const T& operator()() const { return lightCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct DarkCrystals
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_crystals";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T darkCrystals;
            T& operator()() { return darkCrystals; }
            const T& operator()() const { return darkCrystals; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Deeds
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deeds";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deeds;
            T& operator()() { return deeds; }
            const T& operator()() const { return deeds; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct CurrentAccolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentAccolades;
            T& operator()() { return currentAccolades; }
            const T& operator()() const { return currentAccolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PrevAccolades
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prev_accolades";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prevAccolades;
            T& operator()() { return prevAccolades; }
            const T& operator()() const { return prevAccolades; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MysticalCanteen
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mystical_canteen";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mysticalCanteen;
            T& operator()() { return mysticalCanteen; }
            const T& operator()() const { return mysticalCanteen; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GhastlyStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastlyStone;
            T& operator()() { return ghastlyStone; }
            const T& operator()() const { return ghastlyStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GhastlyStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastlyStone1;
            T& operator()() { return ghastlyStone1; }
            const T& operator()() const { return ghastlyStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GhastlyStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ghastly_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ghastlyStone2;
            T& operator()() { return ghastlyStone2; }
            const T& operator()() const { return ghastlyStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerdigrisStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigrisStone;
            T& operator()() { return verdigrisStone; }
            const T& operator()() const { return verdigrisStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerdigrisStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigrisStone1;
            T& operator()() { return verdigrisStone1; }
            const T& operator()() const { return verdigrisStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerdigrisStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "verdigris_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T verdigrisStone2;
            T& operator()() { return verdigrisStone2; }
            const T& operator()() const { return verdigrisStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WailingStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailingStone;
            T& operator()() { return wailingStone; }
            const T& operator()() const { return wailingStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WailingStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailingStone1;
            T& operator()() { return wailingStone1; }
            const T& operator()() const { return wailingStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WailingStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wailing_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wailingStone2;
            T& operator()() { return wailingStone2; }
            const T& operator()() const { return wailingStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowslitStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslitStone;
            T& operator()() { return snowslitStone; }
            const T& operator()() const { return snowslitStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowslitStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslitStone1;
            T& operator()() { return snowslitStone1; }
            const T& operator()() const { return snowslitStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowslitStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowslitStone2;
            T& operator()() { return snowslitStone2; }
            const T& operator()() const { return snowslitStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowtipStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtipStone;
            T& operator()() { return snowtipStone; }
            const T& operator()() const { return snowtipStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowtipStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtipStone1;
            T& operator()() { return snowtipStone1; }
            const T& operator()() const { return snowtipStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowtipStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowtip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowtipStone2;
            T& operator()() { return snowtipStone2; }
            const T& operator()() const { return snowtipStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowdimStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdimStone;
            T& operator()() { return snowdimStone; }
            const T& operator()() const { return snowdimStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowdimStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdimStone1;
            T& operator()() { return snowdimStone1; }
            const T& operator()() const { return snowdimStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnowdimStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snowdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snowdimStone2;
            T& operator()() { return snowdimStone2; }
            const T& operator()() const { return snowdimStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnoworbStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworbStone;
            T& operator()() { return snoworbStone; }
            const T& operator()() const { return snoworbStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnoworbStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworbStone1;
            T& operator()() { return snoworbStone1; }
            const T& operator()() const { return snoworbStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SnoworbStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "snoworb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T snoworbStone2;
            T& operator()() { return snoworbStone2; }
            const T& operator()() const { return snoworbStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafslitStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslitStone;
            T& operator()() { return leafslitStone; }
            const T& operator()() const { return leafslitStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafslitStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslitStone1;
            T& operator()() { return leafslitStone1; }
            const T& operator()() const { return leafslitStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafslitStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafslitStone2;
            T& operator()() { return leafslitStone2; }
            const T& operator()() const { return leafslitStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaftipStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftipStone;
            T& operator()() { return leaftipStone; }
            const T& operator()() const { return leaftipStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaftipStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftipStone1;
            T& operator()() { return leaftipStone1; }
            const T& operator()() const { return leaftipStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaftipStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaftip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaftipStone2;
            T& operator()() { return leaftipStone2; }
            const T& operator()() const { return leaftipStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafdimStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdimStone;
            T& operator()() { return leafdimStone; }
            const T& operator()() const { return leafdimStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafdimStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdimStone1;
            T& operator()() { return leafdimStone1; }
            const T& operator()() const { return leafdimStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeafdimStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leafdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leafdimStone2;
            T& operator()() { return leafdimStone2; }
            const T& operator()() const { return leafdimStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaforbStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforbStone;
            T& operator()() { return leaforbStone; }
            const T& operator()() const { return leaforbStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaforbStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforbStone1;
            T& operator()() { return leaforbStone1; }
            const T& operator()() const { return leaforbStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LeaforbStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaforb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaforbStone2;
            T& operator()() { return leaforbStone2; }
            const T& operator()() const { return leaforbStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskslitStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslitStone;
            T& operator()() { return duskslitStone; }
            const T& operator()() const { return duskslitStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskslitStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslitStone1;
            T& operator()() { return duskslitStone1; }
            const T& operator()() const { return duskslitStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskslitStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskslit_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskslitStone2;
            T& operator()() { return duskslitStone2; }
            const T& operator()() const { return duskslitStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DusktipStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktipStone;
            T& operator()() { return dusktipStone; }
            const T& operator()() const { return dusktipStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DusktipStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktipStone1;
            T& operator()() { return dusktipStone1; }
            const T& operator()() const { return dusktipStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DusktipStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dusktip_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dusktipStone2;
            T& operator()() { return dusktipStone2; }
            const T& operator()() const { return dusktipStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskdimStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdimStone;
            T& operator()() { return duskdimStone; }
            const T& operator()() const { return duskdimStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskdimStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdimStone1;
            T& operator()() { return duskdimStone1; }
            const T& operator()() const { return duskdimStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskdimStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskdim_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskdimStone2;
            T& operator()() { return duskdimStone2; }
            const T& operator()() const { return duskdimStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskorbStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorbStone;
            T& operator()() { return duskorbStone; }
            const T& operator()() const { return duskorbStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskorbStone1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorbStone1;
            T& operator()() { return duskorbStone1; }
            const T& operator()() const { return duskorbStone1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DuskorbStone2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duskorb_stone_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duskorbStone2;
            T& operator()() { return duskorbStone2; }
            const T& operator()() const { return duskorbStone2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PellucidStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pellucid_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pellucidStone;
            T& operator()() { return pellucidStone; }
            const T& operator()() const { return pellucidStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FernStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fern_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fernStone;
            T& operator()() { return fernStone; }
            const T& operator()() const { return fernStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TaupeStone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taupe_stone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taupeStone;
            T& operator()() { return taupeStone; }
            const T& operator()() const { return taupeStone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EschaBeads
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "escha_beads";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eschaBeads;
            T& operator()() { return eschaBeads; }
            const T& operator()() const { return eschaBeads; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EschaSilt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "escha_silt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eschaSilt;
            T& operator()() { return eschaSilt; }
            const T& operator()() const { return eschaSilt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Potpourri
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "potpourri";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T potpourri;
            T& operator()() { return potpourri; }
            const T& operator()() const { return potpourri; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CurrentHallmarks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "current_hallmarks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentHallmarks;
            T& operator()() { return currentHallmarks; }
            const T& operator()() const { return currentHallmarks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TotalHallmarks
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "total_hallmarks";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T totalHallmarks;
            T& operator()() { return totalHallmarks; }
            const T& operator()() const { return totalHallmarks; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Gallantry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gallantry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gallantry;
            T& operator()() { return gallantry; }
            const T& operator()() const { return gallantry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CrafterPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "crafter_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T crafterPoints;
            T& operator()() { return crafterPoints; }
            const T& operator()() const { return crafterPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FireCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fire_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fireCrystalSet;
            T& operator()() { return fireCrystalSet; }
            const T& operator()() const { return fireCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct IceCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ice_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iceCrystalSet;
            T& operator()() { return iceCrystalSet; }
            const T& operator()() const { return iceCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WindCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wind_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T windCrystalSet;
            T& operator()() { return windCrystalSet; }
            const T& operator()() const { return windCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EarthCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "earth_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T earthCrystalSet;
            T& operator()() { return earthCrystalSet; }
            const T& operator()() const { return earthCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LightningCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lightning_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightningCrystalSet;
            T& operator()() { return lightningCrystalSet; }
            const T& operator()() const { return lightningCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WaterCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "water_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T waterCrystalSet;
            T& operator()() { return waterCrystalSet; }
            const T& operator()() const { return waterCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LightCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightCrystalSet;
            T& operator()() { return lightCrystalSet; }
            const T& operator()() const { return lightCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DarkCrystalSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dark_crystal_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T darkCrystalSet;
            T& operator()() { return darkCrystalSet; }
            const T& operator()() const { return darkCrystalSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct McSSr01Set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr01_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mcSSr01Set;
            T& operator()() { return mcSSr01Set; }
            const T& operator()() const { return mcSSr01Set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct McSSr02Set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr02_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mcSSr02Set;
            T& operator()() { return mcSSr02Set; }
            const T& operator()() const { return mcSSr02Set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct McSSr03Set
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mc_s_sr03_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mcSSr03Set;
            T& operator()() { return mcSSr03Set; }
            const T& operator()() const { return mcSSr03Set; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LiquefactionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "liquefaction_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T liquefactionSpheresSet;
            T& operator()() { return liquefactionSpheresSet; }
            const T& operator()() const { return liquefactionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct IndurationSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "induration_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T indurationSpheresSet;
            T& operator()() { return indurationSpheresSet; }
            const T& operator()() const { return indurationSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DetonationSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "detonation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T detonationSpheresSet;
            T& operator()() { return detonationSpheresSet; }
            const T& operator()() const { return detonationSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ScissionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scission_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scissionSpheresSet;
            T& operator()() { return scissionSpheresSet; }
            const T& operator()() const { return scissionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ImpactionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "impaction_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T impactionSpheresSet;
            T& operator()() { return impactionSpheresSet; }
            const T& operator()() const { return impactionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ReverberationSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reverberation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reverberationSpheresSet;
            T& operator()() { return reverberationSpheresSet; }
            const T& operator()() const { return reverberationSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TransfixionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transfixion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transfixionSpheresSet;
            T& operator()() { return transfixionSpheresSet; }
            const T& operator()() const { return transfixionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct CompressionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "compression_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T compressionSpheresSet;
            T& operator()() { return compressionSpheresSet; }
            const T& operator()() const { return compressionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FusionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fusion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fusionSpheresSet;
            T& operator()() { return fusionSpheresSet; }
            const T& operator()() const { return fusionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DistortionSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "distortion_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T distortionSpheresSet;
            T& operator()() { return distortionSpheresSet; }
            const T& operator()() const { return distortionSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FragmentationSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fragmentation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fragmentationSpheresSet;
            T& operator()() { return fragmentationSpheresSet; }
            const T& operator()() const { return fragmentationSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GravitationSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gravitation_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gravitationSpheresSet;
            T& operator()() { return gravitationSpheresSet; }
            const T& operator()() const { return gravitationSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LightSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "light_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lightSpheresSet;
            T& operator()() { return lightSpheresSet; }
            const T& operator()() const { return lightSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DarknessSpheresSet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "darkness_spheres_set";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T darknessSpheresSet;
            T& operator()() { return darknessSpheresSet; }
            const T& operator()() const { return darknessSpheresSet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SilverAmanVoucher
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "silver_aman_voucher";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T silverAmanVoucher;
            T& operator()() { return silverAmanVoucher; }
            const T& operator()() const { return silverAmanVoucher; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace CharPoints_

  struct CharPoints: sqlpp::table_t<CharPoints,
               CharPoints_::Charid,
               CharPoints_::SandoriaCp,
               CharPoints_::BastokCp,
               CharPoints_::WindurstCp,
               CharPoints_::BeastmanSeal,
               CharPoints_::KindredSeal,
               CharPoints_::KindredCrest,
               CharPoints_::HighKindredCrest,
               CharPoints_::SacredKindredCrest,
               CharPoints_::AncientBeastcoin,
               CharPoints_::ValorPoint,
               CharPoints_::Scyld,
               CharPoints_::GuildFishing,
               CharPoints_::GuildWoodworking,
               CharPoints_::GuildSmithing,
               CharPoints_::GuildGoldsmithing,
               CharPoints_::GuildWeaving,
               CharPoints_::GuildLeathercraft,
               CharPoints_::GuildBonecraft,
               CharPoints_::GuildAlchemy,
               CharPoints_::GuildCooking,
               CharPoints_::Cinder,
               CharPoints_::FireFewell,
               CharPoints_::IceFewell,
               CharPoints_::WindFewell,
               CharPoints_::EarthFewell,
               CharPoints_::LightningFewell,
               CharPoints_::WaterFewell,
               CharPoints_::LightFewell,
               CharPoints_::DarkFewell,
               CharPoints_::BallistaPoint,
               CharPoints_::FellowPoint,
               CharPoints_::DailyTally,
               CharPoints_::ChocobuckSandoria,
               CharPoints_::ChocobuckBastok,
               CharPoints_::ChocobuckWindurst,
               CharPoints_::ResearchMark,
               CharPoints_::TunnelWorm,
               CharPoints_::MorionWorm,
               CharPoints_::PhantomWorm,
               CharPoints_::MoblinMarble,
               CharPoints_::Infamy,
               CharPoints_::Prestige,
               CharPoints_::LegionPoint,
               CharPoints_::SparkOfEminence,
               CharPoints_::ShiningStar,
               CharPoints_::ImperialStanding,
               CharPoints_::LeujaoamAssaultPoint,
               CharPoints_::MamoolAssaultPoint,
               CharPoints_::LebrosAssaultPoint,
               CharPoints_::PeriqiaAssaultPoint,
               CharPoints_::IlrusiAssaultPoint,
               CharPoints_::NyzulIsleAssaultPoint,
               CharPoints_::ZeniPoint,
               CharPoints_::Jetton,
               CharPoints_::TherionIchor,
               CharPoints_::AlliedNotes,
               CharPoints_::AmanVouchers,
               CharPoints_::LoginPoints,
               CharPoints_::Bayld,
               CharPoints_::KineticUnit,
               CharPoints_::ObsidianFragment,
               CharPoints_::LebondoptWing,
               CharPoints_::PulchridoptWing,
               CharPoints_::MweyaPlasm,
               CharPoints_::Cruor,
               CharPoints_::ResistanceCredit,
               CharPoints_::DominionNote,
               CharPoints_::FifthEchelonTrophy,
               CharPoints_::FourthEchelonTrophy,
               CharPoints_::ThirdEchelonTrophy,
               CharPoints_::SecondEchelonTrophy,
               CharPoints_::FirstEchelonTrophy,
               CharPoints_::CavePoints,
               CharPoints_::IdTags,
               CharPoints_::OpCredits,
               CharPoints_::TraverserStones,
               CharPoints_::Voidstones,
               CharPoints_::KupofriedCorundums,
               CharPoints_::Imprimaturs,
               CharPoints_::PheromoneSacks,
               CharPoints_::RemsCh1,
               CharPoints_::RemsCh2,
               CharPoints_::RemsCh3,
               CharPoints_::RemsCh4,
               CharPoints_::RemsCh5,
               CharPoints_::RemsCh6,
               CharPoints_::RemsCh7,
               CharPoints_::RemsCh8,
               CharPoints_::RemsCh9,
               CharPoints_::RemsCh10,
               CharPoints_::ReclamationMarks,
               CharPoints_::UnityAccolades,
               CharPoints_::FireCrystals,
               CharPoints_::IceCrystals,
               CharPoints_::WindCrystals,
               CharPoints_::EarthCrystals,
               CharPoints_::LightningCrystals,
               CharPoints_::WaterCrystals,
               CharPoints_::LightCrystals,
               CharPoints_::DarkCrystals,
               CharPoints_::Deeds,
               CharPoints_::CurrentAccolades,
               CharPoints_::PrevAccolades,
               CharPoints_::MysticalCanteen,
               CharPoints_::GhastlyStone,
               CharPoints_::GhastlyStone1,
               CharPoints_::GhastlyStone2,
               CharPoints_::VerdigrisStone,
               CharPoints_::VerdigrisStone1,
               CharPoints_::VerdigrisStone2,
               CharPoints_::WailingStone,
               CharPoints_::WailingStone1,
               CharPoints_::WailingStone2,
               CharPoints_::SnowslitStone,
               CharPoints_::SnowslitStone1,
               CharPoints_::SnowslitStone2,
               CharPoints_::SnowtipStone,
               CharPoints_::SnowtipStone1,
               CharPoints_::SnowtipStone2,
               CharPoints_::SnowdimStone,
               CharPoints_::SnowdimStone1,
               CharPoints_::SnowdimStone2,
               CharPoints_::SnoworbStone,
               CharPoints_::SnoworbStone1,
               CharPoints_::SnoworbStone2,
               CharPoints_::LeafslitStone,
               CharPoints_::LeafslitStone1,
               CharPoints_::LeafslitStone2,
               CharPoints_::LeaftipStone,
               CharPoints_::LeaftipStone1,
               CharPoints_::LeaftipStone2,
               CharPoints_::LeafdimStone,
               CharPoints_::LeafdimStone1,
               CharPoints_::LeafdimStone2,
               CharPoints_::LeaforbStone,
               CharPoints_::LeaforbStone1,
               CharPoints_::LeaforbStone2,
               CharPoints_::DuskslitStone,
               CharPoints_::DuskslitStone1,
               CharPoints_::DuskslitStone2,
               CharPoints_::DusktipStone,
               CharPoints_::DusktipStone1,
               CharPoints_::DusktipStone2,
               CharPoints_::DuskdimStone,
               CharPoints_::DuskdimStone1,
               CharPoints_::DuskdimStone2,
               CharPoints_::DuskorbStone,
               CharPoints_::DuskorbStone1,
               CharPoints_::DuskorbStone2,
               CharPoints_::PellucidStone,
               CharPoints_::FernStone,
               CharPoints_::TaupeStone,
               CharPoints_::EschaBeads,
               CharPoints_::EschaSilt,
               CharPoints_::Potpourri,
               CharPoints_::CurrentHallmarks,
               CharPoints_::TotalHallmarks,
               CharPoints_::Gallantry,
               CharPoints_::CrafterPoints,
               CharPoints_::FireCrystalSet,
               CharPoints_::IceCrystalSet,
               CharPoints_::WindCrystalSet,
               CharPoints_::EarthCrystalSet,
               CharPoints_::LightningCrystalSet,
               CharPoints_::WaterCrystalSet,
               CharPoints_::LightCrystalSet,
               CharPoints_::DarkCrystalSet,
               CharPoints_::McSSr01Set,
               CharPoints_::McSSr02Set,
               CharPoints_::McSSr03Set,
               CharPoints_::LiquefactionSpheresSet,
               CharPoints_::IndurationSpheresSet,
               CharPoints_::DetonationSpheresSet,
               CharPoints_::ScissionSpheresSet,
               CharPoints_::ImpactionSpheresSet,
               CharPoints_::ReverberationSpheresSet,
               CharPoints_::TransfixionSpheresSet,
               CharPoints_::CompressionSpheresSet,
               CharPoints_::FusionSpheresSet,
               CharPoints_::DistortionSpheresSet,
               CharPoints_::FragmentationSpheresSet,
               CharPoints_::GravitationSpheresSet,
               CharPoints_::LightSpheresSet,
               CharPoints_::DarknessSpheresSet,
               CharPoints_::SilverAmanVoucher>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charPoints;
        T& operator()() { return charPoints; }
        const T& operator()() const { return charPoints; }
      };
    };
  };
} // namespace xidb
#endif
