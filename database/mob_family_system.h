// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_MOB_FAMILY_SYSTEM_H
#define XIDB_MOB_FAMILY_SYSTEM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace MobFamilySystem_
  {
    struct FamilyID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "familyID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T familyID;
            T& operator()() { return familyID; }
            const T& operator()() const { return familyID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Family
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "family";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T family;
            T& operator()() { return family; }
            const T& operator()() const { return family; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SuperFamilyID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "superFamilyID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T superFamilyID;
            T& operator()() { return superFamilyID; }
            const T& operator()() const { return superFamilyID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SuperFamily
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "superFamily";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T superFamily;
            T& operator()() { return superFamily; }
            const T& operator()() const { return superFamily; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct EcosystemID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ecosystemID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ecosystemID;
            T& operator()() { return ecosystemID; }
            const T& operator()() const { return ecosystemID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Ecosystem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ecosystem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ecosystem;
            T& operator()() { return ecosystem; }
            const T& operator()() const { return ecosystem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Mobsize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mobsize";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobsize;
            T& operator()() { return mobsize; }
            const T& operator()() const { return mobsize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct HP
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "HP";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HP;
            T& operator()() { return HP; }
            const T& operator()() const { return HP; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MP
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "MP";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MP;
            T& operator()() { return MP; }
            const T& operator()() const { return MP; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct STR
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "STR";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T STR;
            T& operator()() { return STR; }
            const T& operator()() const { return STR; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct DEX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DEX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DEX;
            T& operator()() { return DEX; }
            const T& operator()() const { return DEX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct VIT
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "VIT";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VIT;
            T& operator()() { return VIT; }
            const T& operator()() const { return VIT; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AGI
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "AGI";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AGI;
            T& operator()() { return AGI; }
            const T& operator()() const { return AGI; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct INT
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "INT";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T INT;
            T& operator()() { return INT; }
            const T& operator()() const { return INT; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MND
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "MND";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MND;
            T& operator()() { return MND; }
            const T& operator()() const { return MND; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct CHR
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CHR";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CHR;
            T& operator()() { return CHR; }
            const T& operator()() const { return CHR; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ATT
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ATT";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ATT;
            T& operator()() { return ATT; }
            const T& operator()() const { return ATT; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct DEF
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DEF";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DEF;
            T& operator()() { return DEF; }
            const T& operator()() const { return DEF; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ACC
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ACC";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ACC;
            T& operator()() { return ACC; }
            const T& operator()() const { return ACC; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EVA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EVA";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EVA;
            T& operator()() { return EVA; }
            const T& operator()() const { return EVA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Element;
            T& operator()() { return Element; }
            const T& operator()() const { return Element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Detects
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "detects";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T detects;
            T& operator()() { return detects; }
            const T& operator()() const { return detects; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Charmable
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charmable";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charmable;
            T& operator()() { return charmable; }
            const T& operator()() const { return charmable; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  } // namespace MobFamilySystem_

  struct MobFamilySystem: sqlpp::table_t<MobFamilySystem,
               MobFamilySystem_::FamilyID,
               MobFamilySystem_::Family,
               MobFamilySystem_::SuperFamilyID,
               MobFamilySystem_::SuperFamily,
               MobFamilySystem_::EcosystemID,
               MobFamilySystem_::Ecosystem,
               MobFamilySystem_::Mobsize,
               MobFamilySystem_::Speed,
               MobFamilySystem_::HP,
               MobFamilySystem_::MP,
               MobFamilySystem_::STR,
               MobFamilySystem_::DEX,
               MobFamilySystem_::VIT,
               MobFamilySystem_::AGI,
               MobFamilySystem_::INT,
               MobFamilySystem_::MND,
               MobFamilySystem_::CHR,
               MobFamilySystem_::ATT,
               MobFamilySystem_::DEF,
               MobFamilySystem_::ACC,
               MobFamilySystem_::EVA,
               MobFamilySystem_::Element,
               MobFamilySystem_::Detects,
               MobFamilySystem_::Charmable>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_family_system";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mobFamilySystem;
        T& operator()() { return mobFamilySystem; }
        const T& operator()() const { return mobFamilySystem; }
      };
    };
  };
} // namespace xidb
#endif
