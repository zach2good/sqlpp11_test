// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_GUILD_SHOPS_H
#define XIDB_GUILD_SHOPS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace GuildShops_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct MinPrice
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minPrice;
            T& operator()() { return minPrice; }
            const T& operator()() const { return minPrice; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxPrice
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxPrice;
            T& operator()() { return maxPrice; }
            const T& operator()() const { return maxPrice; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxQuantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxQuantity;
            T& operator()() { return maxQuantity; }
            const T& operator()() const { return maxQuantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct DailyIncrease
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "daily_increase";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dailyIncrease;
            T& operator()() { return dailyIncrease; }
            const T& operator()() const { return dailyIncrease; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct InitialQuantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "initial_quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T initialQuantity;
            T& operator()() { return initialQuantity; }
            const T& operator()() const { return initialQuantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace GuildShops_

  struct GuildShops: sqlpp::table_t<GuildShops,
               GuildShops_::Guildid,
               GuildShops_::Itemid,
               GuildShops_::MinPrice,
               GuildShops_::MaxPrice,
               GuildShops_::MaxQuantity,
               GuildShops_::DailyIncrease,
               GuildShops_::InitialQuantity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_shops";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildShops;
        T& operator()() { return guildShops; }
        const T& operator()() const { return guildShops; }
      };
    };
  };
} // namespace xidb
#endif
