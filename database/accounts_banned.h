// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_ACCOUNTS_BANNED_H
#define XIDB_ACCOUNTS_BANNED_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace AccountsBanned_
  {
    struct Accid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accid;
            T& operator()() { return accid; }
            const T& operator()() const { return accid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Timebann
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timebann";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timebann;
            T& operator()() { return timebann; }
            const T& operator()() const { return timebann; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Timeunbann
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timeunbann";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeunbann;
            T& operator()() { return timeunbann; }
            const T& operator()() const { return timeunbann; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Banncomment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "banncomment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T banncomment;
            T& operator()() { return banncomment; }
            const T& operator()() const { return banncomment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace AccountsBanned_

  struct AccountsBanned: sqlpp::table_t<AccountsBanned,
               AccountsBanned_::Accid,
               AccountsBanned_::Timebann,
               AccountsBanned_::Timeunbann,
               AccountsBanned_::Banncomment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "accounts_banned";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountsBanned;
        T& operator()() { return accountsBanned; }
        const T& operator()() const { return accountsBanned; }
      };
    };
  };
} // namespace xidb
#endif
