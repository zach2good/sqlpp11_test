// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_NPC_LIST_H
#define XIDB_NPC_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace NpcList_
  {
    struct Npcid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "npcid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcid;
            T& operator()() { return npcid; }
            const T& operator()() const { return npcid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct PolutilsName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "polutils_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T polutilsName;
            T& operator()() { return polutilsName; }
            const T& operator()() const { return polutilsName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct PosRot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posRot;
            T& operator()() { return posRot; }
            const T& operator()() const { return posRot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pos_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Flag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flag;
            T& operator()() { return flag; }
            const T& operator()() const { return flag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Speedsub
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speedsub";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speedsub;
            T& operator()() { return speedsub; }
            const T& operator()() const { return speedsub; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Animationsub
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationsub";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationsub;
            T& operator()() { return animationsub; }
            const T& operator()() const { return animationsub; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Namevis
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "namevis";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T namevis;
            T& operator()() { return namevis; }
            const T& operator()() const { return namevis; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EntityFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entityFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityFlags;
            T& operator()() { return entityFlags; }
            const T& operator()() const { return entityFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Look
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "look";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T look;
            T& operator()() { return look; }
            const T& operator()() const { return look; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct NamePrefix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name_prefix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T namePrefix;
            T& operator()() { return namePrefix; }
            const T& operator()() const { return namePrefix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ContentTag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content_tag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentTag;
            T& operator()() { return contentTag; }
            const T& operator()() const { return contentTag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Widescan
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "widescan";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T widescan;
            T& operator()() { return widescan; }
            const T& operator()() const { return widescan; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace NpcList_

  struct NpcList: sqlpp::table_t<NpcList,
               NpcList_::Npcid,
               NpcList_::Name,
               NpcList_::PolutilsName,
               NpcList_::PosRot,
               NpcList_::PosX,
               NpcList_::PosY,
               NpcList_::PosZ,
               NpcList_::Flag,
               NpcList_::Speed,
               NpcList_::Speedsub,
               NpcList_::Animation,
               NpcList_::Animationsub,
               NpcList_::Namevis,
               NpcList_::Status,
               NpcList_::EntityFlags,
               NpcList_::Look,
               NpcList_::NamePrefix,
               NpcList_::ContentTag,
               NpcList_::Widescan>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npcList;
        T& operator()() { return npcList; }
        const T& operator()() const { return npcList; }
      };
    };
  };
} // namespace xidb
#endif
