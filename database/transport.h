// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_TRANSPORT_H
#define XIDB_TRANSPORT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace Transport_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Transport
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transport";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transport;
            T& operator()() { return transport; }
            const T& operator()() const { return transport; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Door
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "door";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T door;
            T& operator()() { return door; }
            const T& operator()() const { return door; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DockX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dockX;
            T& operator()() { return dockX; }
            const T& operator()() const { return dockX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DockY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dockY;
            T& operator()() { return dockY; }
            const T& operator()() const { return dockY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DockZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dockZ;
            T& operator()() { return dockZ; }
            const T& operator()() const { return dockZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DockRot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dock_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dockRot;
            T& operator()() { return dockRot; }
            const T& operator()() const { return dockRot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Boundary
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boundary";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boundary;
            T& operator()() { return boundary; }
            const T& operator()() const { return boundary; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AnimArrive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "anim_arrive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animArrive;
            T& operator()() { return animArrive; }
            const T& operator()() const { return animArrive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct AnimDepart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "anim_depart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animDepart;
            T& operator()() { return animDepart; }
            const T& operator()() const { return animDepart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TimeOffset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_offset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeOffset;
            T& operator()() { return timeOffset; }
            const T& operator()() const { return timeOffset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct TimeInterval
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_interval";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeInterval;
            T& operator()() { return timeInterval; }
            const T& operator()() const { return timeInterval; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct TimeAnimArrive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_anim_arrive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeAnimArrive;
            T& operator()() { return timeAnimArrive; }
            const T& operator()() const { return timeAnimArrive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TimeWaiting
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_waiting";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeWaiting;
            T& operator()() { return timeWaiting; }
            const T& operator()() const { return timeWaiting; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct TimeAnimDepart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_anim_depart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeAnimDepart;
            T& operator()() { return timeAnimDepart; }
            const T& operator()() const { return timeAnimDepart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace Transport_

  struct Transport: sqlpp::table_t<Transport,
               Transport_::Id,
               Transport_::Name,
               Transport_::Transport,
               Transport_::Door,
               Transport_::DockX,
               Transport_::DockY,
               Transport_::DockZ,
               Transport_::DockRot,
               Transport_::Boundary,
               Transport_::AnimArrive,
               Transport_::AnimDepart,
               Transport_::TimeOffset,
               Transport_::TimeInterval,
               Transport_::TimeAnimArrive,
               Transport_::TimeWaiting,
               Transport_::TimeAnimDepart,
               Transport_::Zone>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "transport";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T transport;
        T& operator()() { return transport; }
        const T& operator()() const { return transport; }
      };
    };
  };
} // namespace xidb
#endif
