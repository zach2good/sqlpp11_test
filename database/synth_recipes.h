// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_SYNTH_RECIPES_H
#define XIDB_SYNTH_RECIPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace SynthRecipes_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Desynth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Desynth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Desynth;
            T& operator()() { return Desynth; }
            const T& operator()() const { return Desynth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct KeyItem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "KeyItem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T KeyItem;
            T& operator()() { return KeyItem; }
            const T& operator()() const { return KeyItem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Wood
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Wood";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Wood;
            T& operator()() { return Wood; }
            const T& operator()() const { return Wood; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Smith
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Smith";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Smith;
            T& operator()() { return Smith; }
            const T& operator()() const { return Smith; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Gold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Gold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Gold;
            T& operator()() { return Gold; }
            const T& operator()() const { return Gold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Cloth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Cloth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Cloth;
            T& operator()() { return Cloth; }
            const T& operator()() const { return Cloth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Leather
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Leather";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Leather;
            T& operator()() { return Leather; }
            const T& operator()() const { return Leather; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Bone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Bone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Bone;
            T& operator()() { return Bone; }
            const T& operator()() const { return Bone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Alchemy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Alchemy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Alchemy;
            T& operator()() { return Alchemy; }
            const T& operator()() const { return Alchemy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Cook
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Cook";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Cook;
            T& operator()() { return Cook; }
            const T& operator()() const { return Cook; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Crystal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Crystal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Crystal;
            T& operator()() { return Crystal; }
            const T& operator()() const { return Crystal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct HQCrystal
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "HQCrystal";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HQCrystal;
            T& operator()() { return HQCrystal; }
            const T& operator()() const { return HQCrystal; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient1;
            T& operator()() { return Ingredient1; }
            const T& operator()() const { return Ingredient1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient2;
            T& operator()() { return Ingredient2; }
            const T& operator()() const { return Ingredient2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient3;
            T& operator()() { return Ingredient3; }
            const T& operator()() const { return Ingredient3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient4;
            T& operator()() { return Ingredient4; }
            const T& operator()() const { return Ingredient4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient5;
            T& operator()() { return Ingredient5; }
            const T& operator()() const { return Ingredient5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient6;
            T& operator()() { return Ingredient6; }
            const T& operator()() const { return Ingredient6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient7;
            T& operator()() { return Ingredient7; }
            const T& operator()() const { return Ingredient7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Ingredient8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Ingredient8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Ingredient8;
            T& operator()() { return Ingredient8; }
            const T& operator()() const { return Ingredient8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Result
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Result";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Result;
            T& operator()() { return Result; }
            const T& operator()() const { return Result; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ1;
            T& operator()() { return ResultHQ1; }
            const T& operator()() const { return ResultHQ1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ2;
            T& operator()() { return ResultHQ2; }
            const T& operator()() const { return ResultHQ2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ3;
            T& operator()() { return ResultHQ3; }
            const T& operator()() const { return ResultHQ3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultQty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultQty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultQty;
            T& operator()() { return ResultQty; }
            const T& operator()() const { return ResultQty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ1Qty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ1Qty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ1Qty;
            T& operator()() { return ResultHQ1Qty; }
            const T& operator()() const { return ResultHQ1Qty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ2Qty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ2Qty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ2Qty;
            T& operator()() { return ResultHQ2Qty; }
            const T& operator()() const { return ResultHQ2Qty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultHQ3Qty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultHQ3Qty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultHQ3Qty;
            T& operator()() { return ResultHQ3Qty; }
            const T& operator()() const { return ResultHQ3Qty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct ResultName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResultName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResultName;
            T& operator()() { return ResultName; }
            const T& operator()() const { return ResultName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace SynthRecipes_

  struct SynthRecipes: sqlpp::table_t<SynthRecipes,
               SynthRecipes_::ID,
               SynthRecipes_::Desynth,
               SynthRecipes_::KeyItem,
               SynthRecipes_::Wood,
               SynthRecipes_::Smith,
               SynthRecipes_::Gold,
               SynthRecipes_::Cloth,
               SynthRecipes_::Leather,
               SynthRecipes_::Bone,
               SynthRecipes_::Alchemy,
               SynthRecipes_::Cook,
               SynthRecipes_::Crystal,
               SynthRecipes_::HQCrystal,
               SynthRecipes_::Ingredient1,
               SynthRecipes_::Ingredient2,
               SynthRecipes_::Ingredient3,
               SynthRecipes_::Ingredient4,
               SynthRecipes_::Ingredient5,
               SynthRecipes_::Ingredient6,
               SynthRecipes_::Ingredient7,
               SynthRecipes_::Ingredient8,
               SynthRecipes_::Result,
               SynthRecipes_::ResultHQ1,
               SynthRecipes_::ResultHQ2,
               SynthRecipes_::ResultHQ3,
               SynthRecipes_::ResultQty,
               SynthRecipes_::ResultHQ1Qty,
               SynthRecipes_::ResultHQ2Qty,
               SynthRecipes_::ResultHQ3Qty,
               SynthRecipes_::ResultName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "synth_recipes";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T synthRecipes;
        T& operator()() { return synthRecipes; }
        const T& operator()() const { return synthRecipes; }
      };
    };
  };
} // namespace xidb
#endif
