// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_GUILDS_H
#define XIDB_GUILDS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace Guilds_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct PointsName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "points_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointsName;
            T& operator()() { return pointsName; }
            const T& operator()() const { return pointsName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Guilds_

  struct Guilds: sqlpp::table_t<Guilds,
               Guilds_::Id,
               Guilds_::PointsName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guilds";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guilds;
        T& operator()() { return guilds; }
        const T& operator()() const { return guilds; }
      };
    };
  };
} // namespace xidb
#endif
