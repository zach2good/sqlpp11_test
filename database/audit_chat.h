// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_AUDIT_CHAT_H
#define XIDB_AUDIT_CHAT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace AuditChat_
  {
    struct LineID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lineID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lineID;
            T& operator()() { return lineID; }
            const T& operator()() const { return lineID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Speaker
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speaker";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speaker;
            T& operator()() { return speaker; }
            const T& operator()() const { return speaker; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct LsName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lsName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lsName;
            T& operator()() { return lsName; }
            const T& operator()() const { return lsName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Recipient
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recipient";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recipient;
            T& operator()() { return recipient; }
            const T& operator()() const { return recipient; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Message
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T message;
            T& operator()() { return message; }
            const T& operator()() const { return message; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct Datetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "datetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datetime;
            T& operator()() { return datetime; }
            const T& operator()() const { return datetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace AuditChat_

  struct AuditChat: sqlpp::table_t<AuditChat,
               AuditChat_::LineID,
               AuditChat_::Speaker,
               AuditChat_::Type,
               AuditChat_::LsName,
               AuditChat_::Recipient,
               AuditChat_::Message,
               AuditChat_::Datetime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "audit_chat";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T auditChat;
        T& operator()() { return auditChat; }
        const T& operator()() const { return auditChat; }
      };
    };
  };
} // namespace xidb
#endif
