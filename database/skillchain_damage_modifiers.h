// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_SKILLCHAIN_DAMAGE_MODIFIERS_H
#define XIDB_SKILLCHAIN_DAMAGE_MODIFIERS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace SkillchainDamageModifiers_
  {
    struct ChainLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chain_level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chainLevel;
            T& operator()() { return chainLevel; }
            const T& operator()() const { return chainLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct ChainCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chain_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chainCount;
            T& operator()() { return chainCount; }
            const T& operator()() const { return chainCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct InitialModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "initial_modifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T initialModifier;
            T& operator()() { return initialModifier; }
            const T& operator()() const { return initialModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MagicBurstModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "magic_burst_modifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T magicBurstModifier;
            T& operator()() { return magicBurstModifier; }
            const T& operator()() const { return magicBurstModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  } // namespace SkillchainDamageModifiers_

  struct SkillchainDamageModifiers: sqlpp::table_t<SkillchainDamageModifiers,
               SkillchainDamageModifiers_::ChainLevel,
               SkillchainDamageModifiers_::ChainCount,
               SkillchainDamageModifiers_::InitialModifier,
               SkillchainDamageModifiers_::MagicBurstModifier>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skillchain_damage_modifiers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillchainDamageModifiers;
        T& operator()() { return skillchainDamageModifiers; }
        const T& operator()() const { return skillchainDamageModifiers; }
      };
    };
  };
} // namespace xidb
#endif
