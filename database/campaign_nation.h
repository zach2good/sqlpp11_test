// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CAMPAIGN_NATION_H
#define XIDB_CAMPAIGN_NATION_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CampaignNation_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Reconnaissance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reconnaissance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reconnaissance;
            T& operator()() { return reconnaissance; }
            const T& operator()() const { return reconnaissance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Morale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "morale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T morale;
            T& operator()() { return morale; }
            const T& operator()() const { return morale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Prosperity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prosperity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prosperity;
            T& operator()() { return prosperity; }
            const T& operator()() const { return prosperity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  } // namespace CampaignNation_

  struct CampaignNation: sqlpp::table_t<CampaignNation,
               CampaignNation_::Id,
               CampaignNation_::Reconnaissance,
               CampaignNation_::Morale,
               CampaignNation_::Prosperity>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "campaign_nation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T campaignNation;
        T& operator()() { return campaignNation; }
        const T& operator()() const { return campaignNation; }
      };
    };
  };
} // namespace xidb
#endif
