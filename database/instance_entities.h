// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_INSTANCE_ENTITIES_H
#define XIDB_INSTANCE_ENTITIES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace InstanceEntities_
  {
    struct Instanceid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceid;
            T& operator()() { return instanceid; }
            const T& operator()() const { return instanceid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace InstanceEntities_

  struct InstanceEntities: sqlpp::table_t<InstanceEntities,
               InstanceEntities_::Instanceid,
               InstanceEntities_::Id>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_entities";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceEntities;
        T& operator()() { return instanceEntities; }
        const T& operator()() const { return instanceEntities; }
      };
    };
  };
} // namespace xidb
#endif
