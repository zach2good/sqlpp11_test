// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_INSTANCE_LIST_H
#define XIDB_INSTANCE_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace InstanceList_
  {
    struct Instanceid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceid;
            T& operator()() { return instanceid; }
            const T& operator()() const { return instanceid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct InstanceName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceName;
            T& operator()() { return instanceName; }
            const T& operator()() const { return instanceName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct InstanceZone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance_zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceZone;
            T& operator()() { return instanceZone; }
            const T& operator()() const { return instanceZone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EntranceZone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entrance_zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entranceZone;
            T& operator()() { return entranceZone; }
            const T& operator()() const { return entranceZone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct TimeLimit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_limit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeLimit;
            T& operator()() { return timeLimit; }
            const T& operator()() const { return timeLimit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct StartX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startX;
            T& operator()() { return startX; }
            const T& operator()() const { return startX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct StartY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startY;
            T& operator()() { return startY; }
            const T& operator()() const { return startY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct StartZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startZ;
            T& operator()() { return startZ; }
            const T& operator()() const { return startZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct StartRot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_rot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startRot;
            T& operator()() { return startRot; }
            const T& operator()() const { return startRot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MusicDay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "music_day";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T musicDay;
            T& operator()() { return musicDay; }
            const T& operator()() const { return musicDay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MusicNight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "music_night";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T musicNight;
            T& operator()() { return musicNight; }
            const T& operator()() const { return musicNight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Battlesolo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlesolo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlesolo;
            T& operator()() { return battlesolo; }
            const T& operator()() const { return battlesolo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Battlemulti
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlemulti";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlemulti;
            T& operator()() { return battlemulti; }
            const T& operator()() const { return battlemulti; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  } // namespace InstanceList_

  struct InstanceList: sqlpp::table_t<InstanceList,
               InstanceList_::Instanceid,
               InstanceList_::InstanceName,
               InstanceList_::InstanceZone,
               InstanceList_::EntranceZone,
               InstanceList_::TimeLimit,
               InstanceList_::StartX,
               InstanceList_::StartY,
               InstanceList_::StartZ,
               InstanceList_::StartRot,
               InstanceList_::MusicDay,
               InstanceList_::MusicNight,
               InstanceList_::Battlesolo,
               InstanceList_::Battlemulti>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceList;
        T& operator()() { return instanceList; }
        const T& operator()() const { return instanceList; }
      };
    };
  };
} // namespace xidb
#endif
