// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_EXP_H
#define XIDB_CHAR_EXP_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharExp_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Mode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mode;
            T& operator()() { return mode; }
            const T& operator()() const { return mode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct War
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "war";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T war;
            T& operator()() { return war; }
            const T& operator()() const { return war; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Mnk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mnk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mnk;
            T& operator()() { return mnk; }
            const T& operator()() const { return mnk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Whm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "whm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T whm;
            T& operator()() { return whm; }
            const T& operator()() const { return whm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Blm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "blm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blm;
            T& operator()() { return blm; }
            const T& operator()() const { return blm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rdm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rdm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rdm;
            T& operator()() { return rdm; }
            const T& operator()() const { return rdm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Thf
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "thf";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T thf;
            T& operator()() { return thf; }
            const T& operator()() const { return thf; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Pld
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pld";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pld;
            T& operator()() { return pld; }
            const T& operator()() const { return pld; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Drk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "drk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T drk;
            T& operator()() { return drk; }
            const T& operator()() const { return drk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Bst
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bst";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bst;
            T& operator()() { return bst; }
            const T& operator()() const { return bst; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Brd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "brd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T brd;
            T& operator()() { return brd; }
            const T& operator()() const { return brd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rng
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rng";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rng;
            T& operator()() { return rng; }
            const T& operator()() const { return rng; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Sam
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sam";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sam;
            T& operator()() { return sam; }
            const T& operator()() const { return sam; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Nin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nin;
            T& operator()() { return nin; }
            const T& operator()() const { return nin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Drg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "drg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T drg;
            T& operator()() { return drg; }
            const T& operator()() const { return drg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Smn
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "smn";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T smn;
            T& operator()() { return smn; }
            const T& operator()() const { return smn; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Blu
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "blu";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blu;
            T& operator()() { return blu; }
            const T& operator()() const { return blu; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Cor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cor;
            T& operator()() { return cor; }
            const T& operator()() const { return cor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Pup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pup;
            T& operator()() { return pup; }
            const T& operator()() const { return pup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Dnc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dnc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dnc;
            T& operator()() { return dnc; }
            const T& operator()() const { return dnc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Sch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sch;
            T& operator()() { return sch; }
            const T& operator()() const { return sch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Geo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "geo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T geo;
            T& operator()() { return geo; }
            const T& operator()() const { return geo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Run
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "run";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T run;
            T& operator()() { return run; }
            const T& operator()() const { return run; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Merits
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "merits";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T merits;
            T& operator()() { return merits; }
            const T& operator()() const { return merits; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Limits
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "limits";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T limits;
            T& operator()() { return limits; }
            const T& operator()() const { return limits; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace CharExp_

  struct CharExp: sqlpp::table_t<CharExp,
               CharExp_::Charid,
               CharExp_::Mode,
               CharExp_::War,
               CharExp_::Mnk,
               CharExp_::Whm,
               CharExp_::Blm,
               CharExp_::Rdm,
               CharExp_::Thf,
               CharExp_::Pld,
               CharExp_::Drk,
               CharExp_::Bst,
               CharExp_::Brd,
               CharExp_::Rng,
               CharExp_::Sam,
               CharExp_::Nin,
               CharExp_::Drg,
               CharExp_::Smn,
               CharExp_::Blu,
               CharExp_::Cor,
               CharExp_::Pup,
               CharExp_::Dnc,
               CharExp_::Sch,
               CharExp_::Geo,
               CharExp_::Run,
               CharExp_::Merits,
               CharExp_::Limits>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_exp";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charExp;
        T& operator()() { return charExp; }
        const T& operator()() const { return charExp; }
      };
    };
  };
} // namespace xidb
#endif
