// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_BLUE_SPELL_LIST_H
#define XIDB_BLUE_SPELL_LIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace BlueSpellList_
  {
    struct Spellid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellid;
            T& operator()() { return spellid; }
            const T& operator()() const { return spellid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct MobSkillId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mob_skill_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobSkillId;
            T& operator()() { return mobSkillId; }
            const T& operator()() const { return mobSkillId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct SetPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "set_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setPoints;
            T& operator()() { return setPoints; }
            const T& operator()() const { return setPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct TraitCategory
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_category";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T traitCategory;
            T& operator()() { return traitCategory; }
            const T& operator()() const { return traitCategory; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct TraitCategoryWeight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trait_category_weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T traitCategoryWeight;
            T& operator()() { return traitCategoryWeight; }
            const T& operator()() const { return traitCategoryWeight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct PrimarySc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "primary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T primarySc;
            T& operator()() { return primarySc; }
            const T& operator()() const { return primarySc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct SecondarySc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "secondary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondarySc;
            T& operator()() { return secondarySc; }
            const T& operator()() const { return secondarySc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace BlueSpellList_

  struct BlueSpellList: sqlpp::table_t<BlueSpellList,
               BlueSpellList_::Spellid,
               BlueSpellList_::MobSkillId,
               BlueSpellList_::SetPoints,
               BlueSpellList_::TraitCategory,
               BlueSpellList_::TraitCategoryWeight,
               BlueSpellList_::PrimarySc,
               BlueSpellList_::SecondarySc>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blue_spell_list";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blueSpellList;
        T& operator()() { return blueSpellList; }
        const T& operator()() const { return blueSpellList; }
      };
    };
  };
} // namespace xidb
#endif
