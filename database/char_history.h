// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_HISTORY_H
#define XIDB_CHAR_HISTORY_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharHistory_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct EnemiesDefeated
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enemies_defeated";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enemiesDefeated;
            T& operator()() { return enemiesDefeated; }
            const T& operator()() const { return enemiesDefeated; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TimesKnockedOut
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "times_knocked_out";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timesKnockedOut;
            T& operator()() { return timesKnockedOut; }
            const T& operator()() const { return timesKnockedOut; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MhEntrances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mh_entrances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mhEntrances;
            T& operator()() { return mhEntrances; }
            const T& operator()() const { return mhEntrances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct JoinedParties
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined_parties";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinedParties;
            T& operator()() { return joinedParties; }
            const T& operator()() const { return joinedParties; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct JoinedAlliances
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joined_alliances";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinedAlliances;
            T& operator()() { return joinedAlliances; }
            const T& operator()() const { return joinedAlliances; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellsCast
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spells_cast";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellsCast;
            T& operator()() { return spellsCast; }
            const T& operator()() const { return spellsCast; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AbilitiesUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilities_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilitiesUsed;
            T& operator()() { return abilitiesUsed; }
            const T& operator()() const { return abilitiesUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct WsUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ws_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wsUsed;
            T& operator()() { return wsUsed; }
            const T& operator()() const { return wsUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemsUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "items_used";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemsUsed;
            T& operator()() { return itemsUsed; }
            const T& operator()() const { return itemsUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ChatsSent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chats_sent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chatsSent;
            T& operator()() { return chatsSent; }
            const T& operator()() const { return chatsSent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct NpcInteractions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "npc_interactions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcInteractions;
            T& operator()() { return npcInteractions; }
            const T& operator()() const { return npcInteractions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BattlesFought
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battles_fought";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlesFought;
            T& operator()() { return battlesFought; }
            const T& operator()() const { return battlesFought; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GmCalls
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gm_calls";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmCalls;
            T& operator()() { return gmCalls; }
            const T& operator()() const { return gmCalls; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DistanceTravelled
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "distance_travelled";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T distanceTravelled;
            T& operator()() { return distanceTravelled; }
            const T& operator()() const { return distanceTravelled; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  } // namespace CharHistory_

  struct CharHistory: sqlpp::table_t<CharHistory,
               CharHistory_::Charid,
               CharHistory_::EnemiesDefeated,
               CharHistory_::TimesKnockedOut,
               CharHistory_::MhEntrances,
               CharHistory_::JoinedParties,
               CharHistory_::JoinedAlliances,
               CharHistory_::SpellsCast,
               CharHistory_::AbilitiesUsed,
               CharHistory_::WsUsed,
               CharHistory_::ItemsUsed,
               CharHistory_::ChatsSent,
               CharHistory_::NpcInteractions,
               CharHistory_::BattlesFought,
               CharHistory_::GmCalls,
               CharHistory_::DistanceTravelled>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_history";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charHistory;
        T& operator()() { return charHistory; }
        const T& operator()() const { return charHistory; }
      };
    };
  };
} // namespace xidb
#endif
