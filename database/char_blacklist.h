// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_BLACKLIST_H
#define XIDB_CHAR_BLACKLIST_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharBlacklist_
  {
    struct CharidOwner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid_owner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charidOwner;
            T& operator()() { return charidOwner; }
            const T& operator()() const { return charidOwner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct CharidTarget
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid_target";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charidTarget;
            T& operator()() { return charidTarget; }
            const T& operator()() const { return charidTarget; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
  } // namespace CharBlacklist_

  struct CharBlacklist: sqlpp::table_t<CharBlacklist,
               CharBlacklist_::CharidOwner,
               CharBlacklist_::CharidTarget>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_blacklist";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charBlacklist;
        T& operator()() { return charBlacklist; }
        const T& operator()() const { return charBlacklist; }
      };
    };
  };
} // namespace xidb
#endif
