// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_MOB_PETS_H
#define XIDB_MOB_PETS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace MobPets_
  {
    struct MobMobid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mob_mobid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobMobid;
            T& operator()() { return mobMobid; }
            const T& operator()() const { return mobMobid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct PetOffset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_offset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petOffset;
            T& operator()() { return petOffset; }
            const T& operator()() const { return petOffset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Job
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T job;
            T& operator()() { return job; }
            const T& operator()() const { return job; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct Mobname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mobname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mobname;
            T& operator()() { return mobname; }
            const T& operator()() const { return mobname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Petname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "petname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petname;
            T& operator()() { return petname; }
            const T& operator()() const { return petname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace MobPets_

  struct MobPets: sqlpp::table_t<MobPets,
               MobPets_::MobMobid,
               MobPets_::PetOffset,
               MobPets_::Job,
               MobPets_::Mobname,
               MobPets_::Petname>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mob_pets";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mobPets;
        T& operator()() { return mobPets; }
        const T& operator()() const { return mobPets; }
      };
    };
  };
} // namespace xidb
#endif
