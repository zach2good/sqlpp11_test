// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_UNITY_SYSTEM_H
#define XIDB_UNITY_SYSTEM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace UnitySystem_
  {
    struct Leader
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leader";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leader;
            T& operator()() { return leader; }
            const T& operator()() const { return leader; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct MembersCurrent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "members_current";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T membersCurrent;
            T& operator()() { return membersCurrent; }
            const T& operator()() const { return membersCurrent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PointsCurrent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "points_current";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointsCurrent;
            T& operator()() { return pointsCurrent; }
            const T& operator()() const { return pointsCurrent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct MembersPrev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "members_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T membersPrev;
            T& operator()() { return membersPrev; }
            const T& operator()() const { return membersPrev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PointsPrev
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "points_prev";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointsPrev;
            T& operator()() { return pointsPrev; }
            const T& operator()() const { return pointsPrev; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  } // namespace UnitySystem_

  struct UnitySystem: sqlpp::table_t<UnitySystem,
               UnitySystem_::Leader,
               UnitySystem_::MembersCurrent,
               UnitySystem_::PointsCurrent,
               UnitySystem_::MembersPrev,
               UnitySystem_::PointsPrev>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "unity_system";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T unitySystem;
        T& operator()() { return unitySystem; }
        const T& operator()() const { return unitySystem; }
      };
    };
  };
} // namespace xidb
#endif
