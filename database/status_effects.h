// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_STATUS_EFFECTS_H
#define XIDB_STATUS_EFFECTS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace StatusEffects_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct NegativeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "negative_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T negativeId;
            T& operator()() { return negativeId; }
            const T& operator()() const { return negativeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Overwrite
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "overwrite";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T overwrite;
            T& operator()() { return overwrite; }
            const T& operator()() const { return overwrite; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct BlockId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "block_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blockId;
            T& operator()() { return blockId; }
            const T& operator()() const { return blockId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct RemoveId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remove_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T removeId;
            T& operator()() { return removeId; }
            const T& operator()() const { return removeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element;
            T& operator()() { return element; }
            const T& operator()() const { return element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MinDuration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_duration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minDuration;
            T& operator()() { return minDuration; }
            const T& operator()() const { return minDuration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SortKey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sort_key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sortKey;
            T& operator()() { return sortKey; }
            const T& operator()() const { return sortKey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace StatusEffects_

  struct StatusEffects: sqlpp::table_t<StatusEffects,
               StatusEffects_::Id,
               StatusEffects_::Name,
               StatusEffects_::Flags,
               StatusEffects_::Type,
               StatusEffects_::NegativeId,
               StatusEffects_::Overwrite,
               StatusEffects_::BlockId,
               StatusEffects_::RemoveId,
               StatusEffects_::Element,
               StatusEffects_::MinDuration,
               StatusEffects_::SortKey>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "status_effects";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T statusEffects;
        T& operator()() { return statusEffects; }
        const T& operator()() const { return statusEffects; }
      };
    };
  };
} // namespace xidb
#endif
