// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables xidb.sql ../src/database xidb
#ifndef XIDB_WEAPON_SKILLS_H
#define XIDB_WEAPON_SKILLS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace WeaponSkills_
  {
    struct Weaponskillid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weaponskillid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weaponskillid;
            T& operator()() { return weaponskillid; }
            const T& operator()() const { return weaponskillid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Jobs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "jobs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobs;
            T& operator()() { return jobs; }
            const T& operator()() const { return jobs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Skilllevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skilllevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skilllevel;
            T& operator()() { return skilllevel; }
            const T& operator()() const { return skilllevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Element
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "element";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T element;
            T& operator()() { return element; }
            const T& operator()() const { return element; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Animation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animation;
            T& operator()() { return animation; }
            const T& operator()() const { return animation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct AnimationTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "animationTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animationTime;
            T& operator()() { return animationTime; }
            const T& operator()() const { return animationTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Range
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "range";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T range;
            T& operator()() { return range; }
            const T& operator()() const { return range; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Aoe
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "aoe";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aoe;
            T& operator()() { return aoe; }
            const T& operator()() const { return aoe; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PrimarySc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "primary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T primarySc;
            T& operator()() { return primarySc; }
            const T& operator()() const { return primarySc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SecondarySc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "secondary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secondarySc;
            T& operator()() { return secondarySc; }
            const T& operator()() const { return secondarySc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TertiarySc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tertiary_sc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tertiarySc;
            T& operator()() { return tertiarySc; }
            const T& operator()() const { return tertiarySc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct MainOnly
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "main_only";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mainOnly;
            T& operator()() { return mainOnly; }
            const T& operator()() const { return mainOnly; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct UnlockId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlock_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlockId;
            T& operator()() { return unlockId; }
            const T& operator()() const { return unlockId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  } // namespace WeaponSkills_

  struct WeaponSkills: sqlpp::table_t<WeaponSkills,
               WeaponSkills_::Weaponskillid,
               WeaponSkills_::Name,
               WeaponSkills_::Jobs,
               WeaponSkills_::Type,
               WeaponSkills_::Skilllevel,
               WeaponSkills_::Element,
               WeaponSkills_::Animation,
               WeaponSkills_::AnimationTime,
               WeaponSkills_::Range,
               WeaponSkills_::Aoe,
               WeaponSkills_::PrimarySc,
               WeaponSkills_::SecondarySc,
               WeaponSkills_::TertiarySc,
               WeaponSkills_::MainOnly,
               WeaponSkills_::UnlockId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "weapon_skills";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T weaponSkills;
        T& operator()() { return weaponSkills; }
        const T& operator()() const { return weaponSkills; }
      };
    };
  };
} // namespace xidb
#endif
