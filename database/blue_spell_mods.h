// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_BLUE_SPELL_MODS_H
#define XIDB_BLUE_SPELL_MODS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace BlueSpellMods_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Modid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modid;
            T& operator()() { return modid; }
            const T& operator()() const { return modid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  } // namespace BlueSpellMods_

  struct BlueSpellMods: sqlpp::table_t<BlueSpellMods,
               BlueSpellMods_::SpellId,
               BlueSpellMods_::Modid,
               BlueSpellMods_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blue_spell_mods";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blueSpellMods;
        T& operator()() { return blueSpellMods; }
        const T& operator()() const { return blueSpellMods; }
      };
    };
  };
} // namespace xidb
#endif
