// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_ITEM_WEAPON_H
#define XIDB_ITEM_WEAPON_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace ItemWeapon_
  {
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill;
            T& operator()() { return skill; }
            const T& operator()() const { return skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Subskill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subskill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subskill;
            T& operator()() { return subskill; }
            const T& operator()() const { return subskill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct IlvlSkill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvlSkill;
            T& operator()() { return ilvlSkill; }
            const T& operator()() const { return ilvlSkill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct IlvlParry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_parry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvlParry;
            T& operator()() { return ilvlParry; }
            const T& operator()() const { return ilvlParry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct IlvlMacc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ilvl_macc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ilvlMacc;
            T& operator()() { return ilvlMacc; }
            const T& operator()() const { return ilvlMacc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DmgType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dmgType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dmgType;
            T& operator()() { return dmgType; }
            const T& operator()() const { return dmgType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Hit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hit;
            T& operator()() { return hit; }
            const T& operator()() const { return hit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Dmg
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dmg";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dmg;
            T& operator()() { return dmg; }
            const T& operator()() const { return dmg; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct UnlockPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unlock_points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unlockPoints;
            T& operator()() { return unlockPoints; }
            const T& operator()() const { return unlockPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  } // namespace ItemWeapon_

  struct ItemWeapon: sqlpp::table_t<ItemWeapon,
               ItemWeapon_::ItemId,
               ItemWeapon_::Name,
               ItemWeapon_::Skill,
               ItemWeapon_::Subskill,
               ItemWeapon_::IlvlSkill,
               ItemWeapon_::IlvlParry,
               ItemWeapon_::IlvlMacc,
               ItemWeapon_::DmgType,
               ItemWeapon_::Hit,
               ItemWeapon_::Delay,
               ItemWeapon_::Dmg,
               ItemWeapon_::UnlockPoints>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_weapon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemWeapon;
        T& operator()() { return itemWeapon; }
        const T& operator()() const { return itemWeapon; }
      };
    };
  };
} // namespace xidb
#endif
