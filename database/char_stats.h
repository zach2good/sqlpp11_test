// generated by C:/ffxi/server/build/_deps/sqlpp11-src/scripts/ddl2cpp -split-tables -no-timestamp-warning -fail-on-parse xidb.sql ../src/database xidb
#ifndef XIDB_CHAR_STATS_H
#define XIDB_CHAR_STATS_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace xidb
{
  namespace CharStats_
  {
    struct Charid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charid;
            T& operator()() { return charid; }
            const T& operator()() const { return charid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Hp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hp;
            T& operator()() { return hp; }
            const T& operator()() const { return hp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Mp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mp;
            T& operator()() { return mp; }
            const T& operator()() const { return mp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Nameflags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nameflags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nameflags;
            T& operator()() { return nameflags; }
            const T& operator()() const { return nameflags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mhflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mhflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mhflag;
            T& operator()() { return mhflag; }
            const T& operator()() const { return mhflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Mjob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mjob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mjob;
            T& operator()() { return mjob; }
            const T& operator()() const { return mjob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Sjob
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sjob";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sjob;
            T& operator()() { return sjob; }
            const T& operator()() const { return sjob; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Death
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "death";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T death;
            T& operator()() { return death; }
            const T& operator()() const { return death; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct 2h
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "2h";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T 2H;
            T& operator()() { return 2H; }
            const T& operator()() const { return 2H; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T title;
            T& operator()() { return title; }
            const T& operator()() const { return title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct BazaarMessage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bazaar_message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bazaarMessage;
            T& operator()() { return bazaarMessage; }
            const T& operator()() const { return bazaarMessage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
    };
    struct Zoning
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoning";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoning;
            T& operator()() { return zoning; }
            const T& operator()() const { return zoning; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Mlvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mlvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mlvl;
            T& operator()() { return mlvl; }
            const T& operator()() const { return mlvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Slvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slvl;
            T& operator()() { return slvl; }
            const T& operator()() const { return slvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PetId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petId;
            T& operator()() { return petId; }
            const T& operator()() const { return petId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct PetType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petType;
            T& operator()() { return petType; }
            const T& operator()() const { return petType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct PetHp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petHp;
            T& operator()() { return petHp; }
            const T& operator()() const { return petHp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct PetMp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pet_mp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petMp;
            T& operator()() { return petMp; }
            const T& operator()() const { return petMp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  } // namespace CharStats_

  struct CharStats: sqlpp::table_t<CharStats,
               CharStats_::Charid,
               CharStats_::Hp,
               CharStats_::Mp,
               CharStats_::Nameflags,
               CharStats_::Mhflag,
               CharStats_::Mjob,
               CharStats_::Sjob,
               CharStats_::Death,
               CharStats_::2h,
               CharStats_::Title,
               CharStats_::BazaarMessage,
               CharStats_::Zoning,
               CharStats_::Mlvl,
               CharStats_::Slvl,
               CharStats_::PetId,
               CharStats_::PetType,
               CharStats_::PetHp,
               CharStats_::PetMp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "char_stats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T charStats;
        T& operator()() { return charStats; }
        const T& operator()() const { return charStats; }
      };
    };
  };
} // namespace xidb
#endif
